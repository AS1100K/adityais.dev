name: Auto Update and Build Astro App

on:
  push:
    branches:
      - main
  schedule:
    - cron: "00 13 * * *" # Runs at 6:30 PM IST (13:00 UTC)
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  id-token: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{vars.CHORE_APP_ID}}
          private-key: ${{secrets.CHORE_ACCOUNT_TOKEN}}
          owner: ${{ github.repository_owner }}
          repositories: |
            adityais.dev

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Tools
        run: |
          cd tools
          export TOOLS_CONTRIBUTING_TOKEN="${{steps.app-token.outputs.token}}"
          cargo run -p tool-contributing
          mv prs.json ../
          mv repo-info.json ../
          cd ../

      - name: Add JSON files to Actions Summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Read and display prs.json
              const prsData = JSON.parse(fs.readFileSync('prs.json', 'utf8'));
              const repoInfoData = JSON.parse(fs.readFileSync('repo-info.json', 'utf8'));
              
              let summary = '# 📊 Generated JSON Files Summary\n\n';
              
              // PRs Summary
              summary += '## 🔀 Pull Requests (`prs.json`)\n\n';
              if (Array.isArray(prsData) && prsData.length > 0) {
                summary += `Found **${prsData.length}** pull requests:\n\n`;
                summary += '| Repository | PR # | Title | State | Created |\n';
                summary += '|------------|------|-------|-------|----------|\n';
                
                prsData.slice(0, 10).forEach(pr => {
                  const repo = `${pr.owner_repo[0]}/${pr.owner_repo[1]}`;
                  const title = pr.title.length > 50 ? pr.title.substring(0, 47) + '...' : pr.title;
                  const date = new Date(pr.created_at).toISOString().split('T')[0];
                  summary += `| [${repo}](${pr.html_url}) | #${pr.number} | ${title} | ${pr.state} | ${date} |\n`;
                });
                
                if (prsData.length > 10) {
                  summary += `\n*Showing first 10 of ${prsData.length} pull requests*\n`;
                }
              } else {
                summary += '*No pull requests found*\n';
              }
              
              // Repository Info Summary
              summary += '\n## ⭐ Repository Information (`repo-info.json`)\n\n';
              if (Object.keys(repoInfoData).length > 0) {
                summary += '| Repository | Stars |\n';
                summary += '|------------|-------|\n';
                
                Object.entries(repoInfoData)
                  .sort(([,a], [,b]) => b - a)
                  .forEach(([repo, stars]) => {
                    summary += `| ${repo} | ⭐ ${stars} |\n`;
                  });
              } else {
                summary += '*No repository information found*\n';
              }
              
              // File sizes
              const prsSize = fs.statSync('prs.json').size;
              const repoInfoSize = fs.statSync('repo-info.json').size;
              
              summary += '\n## 📁 File Information\n\n';
              summary += `- \`prs.json\`: ${(prsSize / 1024).toFixed(2)} KB\n`;
              summary += `- \`repo-info.json\`: ${(repoInfoSize / 1024).toFixed(2)} KB\n`;
              
              // Add timestamp
              summary += `\n*Generated on: ${new Date().toISOString()}*\n`;
              
              await core.summary.addRaw(summary).write();
              
            } catch (error) {
              console.error('Error processing JSON files:', error);
              await core.summary
                .addRaw('# ❌ Error Processing JSON Files\n\n')
                .addRaw(`Error: ${error.message}\n\n`)
                .addRaw('The JSON files may be missing or contain invalid data.')
                .write();
            }

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23.4"

      - name: Install dependencies
        run: npm install

      - name: Set ENV variable
        run: echo "GITHUB_API_KEY=${{ steps.app-token.outputs.token }}" >> $GITHUB_ENV

      - name: Build Astro app
        run: npm run build

      - name: Upload GitHub Pages Artifact
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
