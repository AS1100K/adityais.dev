---
import { Image } from "astro:assets";

interface Props {
  title: string;
  is_archived?: boolean;
  description: string[];
  /** Number of stars of the repo.
   *
   * NOTE: If `stars` are not provided but `github_url` is provided then
   * it will automatically populate.
   */
  stars?: number;
  /** GitHub Repository URL
   *
   * format -> `{owner}/{repo}`
   */
  github_url?: string;
  external_url?: string;
  /** List of languages and tool used in this project */
  languages_n_tools?: string[];
}

const props = Astro.props;

if (!props.stars && props.github_url) {
  try {
    const { GITHUB_API_KEY } = await import.meta.env;

    const response = await fetch(
      `https://api.github.com/repos/${props.github_url}`,
      {
        headers: {
          Accept: "application/vnd.github+json",
          "X-GitHub-Api-Version": "2022-11-28",
          Authorization: `Bearer ${GITHUB_API_KEY}`,
          // Use your own github username here
          "User-Agent": "AS1100K",
        },
      },
    );

    if (!response.ok) {
      throw new Error(
        `Response status: ${response.status} Response body: ${await response.text()}`,
      );
    }

    const json = await response.json();
    props.stars = json.stargazers_count;
    props.github_url = json.html_url;
    props.is_archived = json.archived;
  } catch (error) {
    console.error(error);
  }
}

export const prerender = true;

// Cache this page for 1 day
Astro.response.headers.set(
  "CDN-Cache-Control",
  "public, max-age=86400, must-revalidate",
);
---

<div class="rounded-xl border-1 border-solid border-text p-4 pb-12 m-0 relative">
  <div class="flex justify-between items-center mb-2">
    <div class="flex justify-start items-center mb-2 gap-2">
      <Image
        src="/assets/icons/repo.svg"
        width={24}
        height={24}
        alt="Repo Icon"
      />
      <h2 class="text-lg m-0 p-0 poppins-bold">{props.title}</h2>
      {
        props.is_archived && (
          <div class="archived rounded-[50px] border-[#9a6700] text-[#9a6700] border-1 border-solid flex justify-center items-center">
            <p class="m-0 py-1 px-2 text-[#9a6700]">archived</p>
          </div>
        )
      }
    </div>
    {
      props.stars && (
        <div class="flex justify-start items-center mb-2 gap-1">
          <Image
            src="/assets/icons/star.svg"
            width={24}
            height={24}
            alt="Stars of repository"
          />
          <p class="m-0">{props.stars}</p>
        </div>
      )
    }
  </div>
  <p class="m-0">{props.description}</p>
  <div class="flex justify-between items-center absolute bottom-2 w-featured_project">
    <div class="flex justify-center items-center gap-2">
      {
        props.languages_n_tools?.map((language) => (
          <div class="rounded-[50px] bg-secondary flex justify-center items-center">
            <p class="m-0 px-3 py-1 text-sm">{language}</p>
          </div>
        ))
      }
    </div>
    <div class="flex justify-center items-center gap-2">
      {
        props.external_url && (
          <a href={props.external_url}>
            <Image
              src="/assets/icons/link-external.svg"
              width={24}
              height={24}
              alt="Project External Link"
            />
          </a>
        )
      }
      {
        props.github_url && (
          <a class="flex justify-center items-center" href={props.github_url}>
            <Image
              src="/assets/icons/github.svg"
              width={24}
              height={24}
              alt="GitHub Repo Link"
            />
          </a>
        )
      }
    </div>
  </div>
</div>
